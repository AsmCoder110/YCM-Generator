#!/usr/bin/env python2


import os
import os.path
import re
import datetime


def main():
    '''TODO: run build process:
        time env PATH=$PATH:/home/reuben/scratch/YCM-Generator/fake-toolchain/Unix
                 CROSS_COMPILE=fake-
                 CC=fake-gcc
                 YCM_CONFIG_GEN_LOG=log
                 make -i -j6 >log1 2>log2
        '''
    pass

    build_log = open("/home/reuben/scratch/ycm-linux/log")
    project_dir = "/home/reuben/scratch/ycm-linux"
    flags = parse_flags(build_log)
    generate_conf(flags, project_dir)


def fake_build(projectDir):
    '''Builds the project using the fake toolchain, to collect the compiler flags.'''

    pass


def parse_flags(build_log):
    '''Creates a list of compiler flags from the build log.
    build_log: an iterator of lines
    Returns: a list of flags'''

    # Used to ignore entries which result in temporary files, or don't fully
    # compile the file
    temp_output = re.compile("-S|-E|-x assembler|-o ([a-zA-Z0-9._].tmp)|(/dev/null)")

    # Skip these flags, since they're not relevant
    ignored_flags = ["-", "-c", "-o", "-g", "-v", "-P", "-W[apl],.*", "-O([0-9sg]|fast)", "-[fmQU].*",
                     "-print-file-name=.*"]
    ignored_flags = re.compile("|".join(map("^{}$".format, ignored_flags)))
    flags = set()

    # Process build log
    for line in build_log:
        if(temp_output.search(line)):
            continue

        words = line.split()

        for (i, word) in enumerate(words):
            if(word[0] != '-' or ignored_flags.match(word)):
                continue

            # include arguments for this option, if there are any
            if(i != len(words) - 1 and words[i + 1][0] != '-'):
                flags.add(word + ' ' + words[i + 1])
            else:
                flags.add(word)

    # Only specify one word size (the largest)
    # (Different sizes are used for different files in the linux kernel.)
    mRegex = re.compile("^-m[0-9]+$")
    word_flags = list([f for f in flags if mRegex.match(f)])

    if(len(word_flags) > 1):
        for flag in word_flags:
            flags.remove(flag)

        flags.add(max(word_flags))

    return sorted(flags)


def generate_conf(flags, project_dir):
    '''Generates the .ycm_extra_conf.py.

    flags: the list of flags
    project_dir: the root directory of the project'''

    template_file = os.path.join(os.path.dirname(__file__), "template.py")
    config_file = os.path.join(project_dir, ".ycm_extra_conf.py")

    with open(template_file, "r") as template:
        with open(config_file, "w") as output:
            output.write("# Generated by YCM Generator at {}\n\n".format(str(datetime.datetime.today())))

            for line in template:
                if(line == "    # INSERT FLAGS HERE\n"):
                    # insert generated code
                    output.writelines("    '{}',\n".format(flag) for flag in flags)
                else:
                    # copy template
                    output.write(line)



if(__name__ == "__main__"):
    main()

